apply plugin: 'java'
apply plugin: 'groovy'
apply plugin: 'application'

defaultTasks "run"

mainClassName = 'bio'

dependencies {
    compile files('libs/algs4.jar')
    compile 'org.codehaus.groovy:groovy-all:2.4.10'  
}

// tag::repositories[]
repositories {
    mavenCentral()
}
// end::repositories[]
dependencies {
    compile(group: 'com.shekhargulati', name: 'strman', version: '0.2.0')
    compile(group: 'org.postgresql', name: 'postgresql', version: '42.0.0')
    compile(group: 'org.biojava', name: 'biojava-genome', version: '4.2.0')
}

// Creates scripts for entry points
// Subproject must apply application plugin to be able to call this method.
def createScript(project, mainClass, name) {
  project.tasks.create(name: name, type: CreateStartScripts) {
    outputDir       = new File(project.buildDir, 'scripts')
    mainClassName   = mainClass
    applicationName = name
    classpath       = project.tasks[JavaPlugin.JAR_TASK_NAME].outputs.files + project.configurations.runtime
  }
  project.tasks[name].dependsOn(project.jar)

  project.applicationDistribution.with {
    into("bin") {
      from(project.tasks[name])
      fileMode = 0755
    }
  }
}


// The next two lines disable the tasks for the primary main which by default
// generates a script with a name matching the project name. 
// You can leave them enabled but if so you'll need to define mainClassName
// And you'll be creating your application scripts two different ways which 
// could lead to confusion
//startScripts.enabled = false
//run.enabled = false

// Call this for each Main class you want to expose with an app script
createScript(project, 'first', 'first')
createScript(project, 'play', 'play')

task hello {
    doLast {
        println("heoo;")
    }
}




